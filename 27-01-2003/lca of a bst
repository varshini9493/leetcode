Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
solution:

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        TreeNode curr=root;
        if(root==null){
            return null;
           }
     if(p.val<curr.val && q.val<curr.val){
              return  lowestCommonAncestor(curr.left,p,q);
             }
    else if(p.val>curr.val && q.val>curr.val){
           return lowestCommonAncestor(curr.right,p,q);
    
    }return curr;
}}
